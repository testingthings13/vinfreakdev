name: GPT Autofix
on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  ci-and-autofix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # FRONTEND (React + Vite)
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Frontend install
        working-directory: frontend
        run: npm ci || npm i
      - name: Frontend build (do not fail)
        env:
          VITE_API_BASE: https://vinfreak.onrender.com
        working-directory: frontend
        run: npm run build || true

      # BACKEND (FastAPI)
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Backend install
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "fastapi[all]" uvicorn ruff mypy pytest || true
      - name: Backend checks (do not fail)
        working-directory: backend
        run: |
          ruff check . || true
          mypy . || true
          pytest -q || true

      # Build context for GPT
      - name: Summarize repo & hints
        run: |
          echo "## TREE" > gpt_context.md
          (git ls-files | head -n 800) >> gpt_context.md
          echo -e "\n## FRONTEND package.json" >> gpt_context.md
          [ -f frontend/package.json ] && cat frontend/package.json >> gpt_context.md || true
          echo -e "\n## BACKEND requirements.txt" >> gpt_context.md
          [ -f backend/requirements.txt ] && cat backend/requirements.txt >> gpt_context.md || true
          cat << 'EOF' >> gpt_context.md

## PROJECT NOTES
- Frontend: React + Vite in /frontend (uses import.meta.env.VITE_API_BASE).
- Backend: FastAPI in /backend (serves /cars etc.).
- Fix common issues: wrong API base usage, missing CORS, TS/JS/Python errors, build failures.
EOF

      # Call GPT, create patch
      - name: Install OpenAI SDK
        run: python -m pip install "openai>=1.30,<2"
      - name: Run GPT Autofix
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python .github/scripts/gpt_autofix.py gpt_context.md > gpt_review.md

      # Apply patch, push branch
      - name: Apply GPT patch
        id: apply
        run: |
          if grep -q '```diff' gpt_review.md; then
            awk '/```diff/{flag=1;next}/```/{if(flag){flag=0;print ""}}flag' gpt_review.md > patch.diff
            if [ -s patch.diff ]; then
              git config user.name "gpt-autofix-bot"
              git config user.email "actions@users.noreply.github.com"
              BR="gpt-autofix/$(date +%Y%m%d-%H%M%S)"
              git checkout -b "$BR"
              git apply --reject --whitespace=fix patch.diff || true
              git add -A
              if ! git diff --cached --quiet; then
                git commit -m "GPT autofix: patch proposal"
                git push origin "$BR"
                echo "branch=$BR" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      # Open PR via GitHub API (no gh CLI needed)
      - name: Open PR (if branch exists)
        if: steps.apply.outputs.branch != ''
        uses: actions/github-script@v7
        with:
          script: |
            const branch = core.getInput('branch') || '${{ steps.apply.outputs.branch }}';
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: branch,
              base: 'main',
              title: 'GPT Autofix',
              body: 'Automatic fixes generated by GPT. See gpt_review.md for rationale.'
            });
            core.info(`PR opened: #${pr.number}`);
