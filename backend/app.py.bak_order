from fastapi import FastAPI, Request, Depends, Form, UploadFile, File
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import List, Optional
from sqlmodel import Session, select
from datetime import datetime
from pathlib import Path
import os, shutil

from backend_settings import settings
from db import engine, init_db
from models import Car, Media, ImportJob, Setting
from auth import admin_required

app = FastAPI(title="Vinfreak Backend")
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
templates = Jinja2Templates(directory="templates")

# CORS (if you need it for the FE)
try:
    from fastapi.middleware.cors import CORSMiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
except Exception:
    pass

@app.on_event("startup")
def on_start():
    Path(settings.UPLOAD_DIR).mkdir(parents=True, exist_ok=True)
    init_db()

# -----------------------
# Public endpoints (used by your frontend)
# -----------------------

@app.get("/cars")
def list_cars():
    from sqlalchemy import text
    from sqlmodel import Session, select
    # Try ORM simple select (no ordering assumptions)
    try:
        with Session(engine) as s_:
            cars = s_.exec(select(Car)).all()
            # Convert ORM objects to dicts safely
            try:
                return [c.model_dump() for c in cars]
            except Exception:
                return [ {k:getattr(c,k,None) for k in ("id","vin","year","make","model","price","currency","source","url","title","description","image_url","posted_at")} for c in cars ]
    except Exception:
        pass
    # Raw SQL fallback (works even if model mapping is slightly off)
    with Session(engine) as s_:
        rows = s_.exec(text("SELECT * FROM cars")).mappings().all()
        # Convert RowMapping -> plain dict
        return [ dict(r) for r in rows ]

@app.get("/cars/{id}")
def get_car(id: str):
    with Session(engine) as s:
        car = None
        if id.isdigit():
            car = s.get(Car, int(id))
        if not car:
            car = s.exec(select(Car).where((Car.vin == id) | (Car.lot_number == id))).first()
        if not car:
            return {"detail": "Not found"}
        return car.model_dump()

@app.get("/public/settings")
def public_settings():
    with Session(engine) as s:
        rows = s.exec(select(Setting)).all()
        data = {r.key: r.value for r in rows}
        return data

# -----------------------
# Admin UI (at /admin)
# -----------------------
@app.get("/admin", response_class=HTMLResponse)
def admin_index(request: Request, _=Depends(admin_required)):
    return templates.TemplateResponse("admin_index.html", {"request": request, "title":"Dashboard"})

# Settings
@app.get("/admin/settings", response_class=HTMLResponse)
def admin_settings(request: Request, _=Depends(admin_required)):
    with Session(engine) as s:
        rows = s.exec(select(Setting)).all()
        data = {r.key: r.value for r in rows}
    return templates.TemplateResponse("admin_settings.html", {"request": request, "settings": data, "title":"Settings"})

@app.post("/admin/settings")
async def admin_settings_save(
    request: Request,
    site_title: str = Form("Vinfreak"),
    site_tagline: str = Form("Discover performance & provenance"),
    theme: str = Form("dark"),
    logo_url: str = Form(""),
    logo: UploadFile | None = File(None),
    _=Depends(admin_required),
):
    if logo and logo.filename:
        dest = Path("uploads") / logo.filename
        with dest.open("wb") as f:
            shutil.copyfileobj(logo.file, f)
        logo_url = f"/uploads/{logo.filename}"

    with Session(engine) as s:
        for k,v in {"site_title":site_title, "site_tagline":site_tagline, "theme":theme, "logo_url":logo_url}.items():
            row = s.get(Setting, k)
            if not row:
                row = Setting(key=k, value=v); s.add(row)
            else:
                row.value = v
        s.commit()

    return RedirectResponse("/admin/settings", status_code=303)

# Cars
@app.get("/admin/cars", response_class=HTMLResponse)
def admin_cars(request: Request, q: Optional[str] = None, _=Depends(admin_required)):
    with Session(engine) as s:
        stmt = select(Car).order_by(getattr(Car, 'posted_at', Car.id).desc())
        if q:
            like = f"%{q}%"
            stmt = stmt.where((Car.vin.like(like)) | (Car.make.like(like)) | (Car.model.like(like)) | (Car.title.like(like)))
        cars = s.exec(stmt).all()
    return templates.TemplateResponse("admin_cars.html", {"request": request, "cars": cars, "q": q or "", "title":"Cars"})

@app.get("/admin/cars/new", response_class=HTMLResponse)
def admin_car_new(request: Request, _=Depends(admin_required)):
    return templates.TemplateResponse("admin_car_edit.html", {"request": request, "car": None, "action": "/admin/cars/new", "title":"New Car"})

@app.post("/admin/cars/new")
def admin_car_create(
    request: Request,
    vin: str = Form(None), year: int = Form(None), make: str = Form(None), model: str = Form(None), trim: str = Form(None),
    price: float = Form(None), mileage: int = Form(None), currency: str = Form("USD"),
    city: str = Form(None), state: str = Form(None), location: str = Form(None),
    auction_status: str = Form(None), lot_number: str = Form(None), source: str = Form(None),
    url: str = Form(None), title: str = Form(None), main_image_url: str = Form(None),
    description: str = Form(None),
    _=Depends(admin_required),
):
    with Session(engine) as s:
        c = Car(
            vin=vin, year=year, make=make, model=model, trim=trim, price=price, mileage=mileage, currency=currency,
            city=city, state=state, location=location, auction_status=auction_status, lot_number=lot_number,
            source=source, url=url, title=title, main_image_url=main_image_url, description=description,
        )
        s.add(c); s.commit()
    return RedirectResponse("/admin/cars", status_code=303)

@app.get("/admin/cars/{car_id}", response_class=HTMLResponse)
def admin_car_edit(request: Request, car_id: int, _=Depends(admin_required)):
    with Session(engine) as s:
        car = s.get(Car, car_id)
    return templates.TemplateResponse("admin_car_edit.html", {"request": request, "car": car, "action": f"/admin/cars/{car_id}", "title": f"Edit Car {car_id}"})

@app.post("/admin/cars/{car_id}")
def admin_car_update(
    request: Request, car_id: int,
    vin: str = Form(None), year: int = Form(None), make: str = Form(None), model: str = Form(None), trim: str = Form(None),
    price: float = Form(None), mileage: int = Form(None), currency: str = Form("USD"),
    city: str = Form(None), state: str = Form(None), location: str = Form(None),
    auction_status: str = Form(None), lot_number: str = Form(None), source: str = Form(None),
    url: str = Form(None), title: str = Form(None), main_image_url: str = Form(None),
    description: str = Form(None),
    _=Depends(admin_required),
):
    with Session(engine) as s:
        car = s.get(Car, car_id)
        for k, v in dict(
            vin=vin, year=year, make=make, model=model, trim=trim, price=price, mileage=mileage, currency=currency,
            city=city, state=state, location=location, auction_status=auction_status, lot_number=lot_number,
            source=source, url=url, title=title, main_image_url=main_image_url, description=description,
        ).items():
            setattr(car, k, v)
        s.add(car); s.commit()
    return RedirectResponse("/admin/cars", status_code=303)

@app.get("/admin/cars/{car_id}/delete")
def admin_car_delete(car_id: int, _=Depends(admin_required)):
    with Session(engine) as s:
        car = s.get(Car, car_id)
        if car: s.delete(car); s.commit()
    return RedirectResponse("/admin/cars", status_code=303)

# Media
@app.get("/admin/media", response_class=HTMLResponse)
def admin_media(request: Request, _=Depends(admin_required)):
    with Session(engine) as s:
        items = s.exec(select(Media).order_by(Media.uploaded_at.desc())).all()
    return templates.TemplateResponse("admin_media.html", {"request": request, "items": items, "title":"Media"})

@app.post("/admin/media")
async def admin_media_upload(files: List[UploadFile] = File(...), _=Depends(admin_required)):
    Path(settings.UPLOAD_DIR).mkdir(parents=True, exist_ok=True)
    with Session(engine) as s:
        for f in files:
            dest = Path(settings.UPLOAD_DIR) / f.filename
            with dest.open("wb") as out:
                shutil.copyfileobj(f.file, out)
            url = f"/uploads/{f.filename}"
            s.add(Media(filename=f.filename, url=url))
        s.commit()
    return RedirectResponse("/admin/media", status_code=303)

# Imports
@app.get("/admin/imports", response_class=HTMLResponse)
def admin_imports(request: Request, _=Depends(admin_required)):
    with Session(engine) as s:
        jobs = s.exec(select(ImportJob).order_by(ImportJob.created.desc())).all()
    return templates.TemplateResponse("admin_imports.html", {"request": request, "jobs": jobs, "title":"Imports"})

@app.post("/admin/imports/run")
def admin_imports_run(source: str = Form(...), _=Depends(admin_required)):
    with Session(engine) as s:
        job = ImportJob(source=source, status="queued", created=datetime.utcnow())
        s.add(job); s.commit()
    return RedirectResponse("/admin/imports", status_code=303)
